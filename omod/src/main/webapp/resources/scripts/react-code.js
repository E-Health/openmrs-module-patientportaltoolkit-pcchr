var PcchrBox = React.createClass({
  loadCommentsFromServer: function() {
    var pcchr_url = this.props.geturl + '&patientId=' + this.props.patientid;
    $.ajax({
      url: pcchr_url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="pcchrBox">
        <h1>Pcchrs</h1>
        <PcchrForm onCommentSubmit={this.handleCommentSubmit} />
        <PcchrList data={this.state.data} />
      </div>
    );
  }
});

var PcchrForm = React.createClass({
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.posturl,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  render: function() {
    return (
      <div className="pcchrBox">
        <h1>Pcchrs</h1>
        <BloodSugarForm onCommentSubmit={this.handleCommentSubmit} />
        <BodyWeightForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }

});

var BloodSugarForm = React.createClass({
  getInitialState: function() {
    return {pcchr: ''};
  },
  handlePcchrChange: function(e) {
    this.setState({pcchr: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var pcchr = this.state.pcchr.trim();
    var data_name = 'Blood Sugar';
    var data_code = '144194009';
    if (!pcchr) {
      return;
    }
    this.props.onCommentSubmit({dataName: data_name, dataCode: data_code, pcchr: pcchr});
    this.setState({pcchr: ''});
  },
  render: function() {
    return (
      <form className="pcchrForm" onSubmit={this.handleSubmit}>
      <div class="input-group">
        <input value={this.state.pcchr} onChange={this.handlePcchrChange} id="glucose" type="text" class="form-control" placeholder="Your Blood Glucose Reading" aria-describedby="basic-addon2">
        <span class="input-group-addon" id="basic-addon2">mg/DL</span>
        <input type="submit" class="btn btn-success pull-right" id="GlucoseSave">Save Blood Glucose</button>
      </div>
      </form>
    );
  }
});

var BodyWeightForm = React.createClass({
  getInitialState: function() {
    return {pcchr: ''};
  },
  handlePcchrChange: function(e) {
    this.setState({pcchr: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var pcchr = this.state.pcchr.trim();
    var data_name = 'Body Weight';
    var data_code = '27113001';
    if (!pcchr) {
      return;
    }
    this.props.onCommentSubmit({dataName: data_name, dataCode: data_code, pcchr: pcchr});
    this.setState({pcchr: ''});
  },
  render: function() {
    return (
      <form className="pcchrForm" onSubmit={this.handleSubmit}>
      <div class="input-group">
        <input value={this.state.pcchr} onChange={this.handlePcchrChange} id="weight" type="text" class="form-control" placeholder="Your Weight" aria-describedby="basic-addon2">
        <span class="input-group-addon" id="basic-addon3">Kg</span>
        <input type="submit" class="btn btn-success pull-right" id="WeightSave">Save Body Weight</button>
      </div>
      </form>
    );
  }
});